name: Nightly

# Timed-trigger
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '*/50 0 * * *'

env:
  buildDir: '${{ github.workspace }}/build'

jobs:
  # Check if there was a commit in 24hours
  build_check:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "should_run=false" >> $GITHUB_OUTPUT

  # Windows-builds
  #  cmake 64bit
  build_win_x64:
    needs: build_check
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    name: Nightly-Win-x64

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.2.4'
        modules: 'qtmultimedia'

    - name: Configure
      run: cmake -S. -Bbuild

    - name: Make
      run: cmake --build build -j $(nproc) --config Release

    - name: Package
      run: |
        mkdir dist
        copy build\Release\D1HeroPlanner.exe dist
        cd dist
        windeployqt D1HeroPlanner.exe --no-compiler-runtime --no-opengl-sw --no-system-d3d-compiler --no-virtualkeyboard --no-translations --no-quick-import
      shell: cmd

    - name: Create zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: '../D1HeroPlanner.zip'
        directory: 'dist'

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        path: D1HeroPlanner.zip
        name: D1HeroPlanner-Windows-x64.zip

  #  cmake 32bit
  build_win_x86:
    needs: build_check
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    name: Nightly-Win-x86

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '5.15.2'
        arch: 'win32_msvc2019'

    - name: Configure
      run: cmake -S. -Bbuild -A Win32

    - name: Make
      run: cmake --build build -j $(nproc) --config Release

    - name: Package
      run: |
        mkdir dist
        copy build\Release\D1HeroPlanner.exe dist
        cd dist
        windeployqt D1HeroPlanner.exe --no-compiler-runtime --no-opengl-sw --no-system-d3d-compiler --no-virtualkeyboard --no-translations --no-quick-import
      shell: cmd

    - name: Create zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: '../D1HeroPlanner.zip'
        directory: 'dist'

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        path: D1HeroPlanner.zip
        name: D1HeroPlanner-Windows-x86.zip

  #  linux 64bit
  build_linux_x64:
    needs: build_check
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    name: Nightly-Linux-x64
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Dependencies
      run: sudo apt-get update && sudo apt-get install cmake qt6-base-dev libgl1-mesa-dev qt6-tools-dev qt6-l10n-tools qt6-tools-dev-tools qt6-multimedia-dev

    - name: Configure
      run: cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCPACK=ON

    - name: Make
      run: cmake --build build -j $(nproc) --target package

    - name: Create zip
      run: |
        mv build/d1heroplanner*.deb build/D1HeroPlanner-Linux-x64.deb
        zip -j -q D1HeroPlanner.zip build/D1HeroPlanner build/D1HeroPlanner-Linux-x64.deb

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        path: D1HeroPlanner.zip
        name: D1HeroPlanner-Linux-x64.zip

  release:
    needs: [build_check, build_win_x64, build_win_x86, build_linux_x64]
    if: ${{ needs.build_check.outputs.should_run != 'false' }}
    #runs-on: windows-latest
    runs-on: ubuntu-latest
    steps:
    # x86 builds
    - name: Download Win D1HeroPlanner artifact
      uses: actions/download-artifact@v4
      with:
        name: D1HeroPlanner-Windows-x86.zip
    - run: mv ${{github.workspace}}/D1HeroPlanner.zip ${{github.workspace}}/D1HeroPlanner-Windows-x86.zip

    # x64 builds
    - name: Download Win D1HeroPlanner artifact
      uses: actions/download-artifact@v4
      with:
        name: D1HeroPlanner-Windows-x64.zip
    - run: mv ${{github.workspace}}/D1HeroPlanner.zip ${{github.workspace}}/D1HeroPlanner-Windows-x64.zip

    - name: Download Linux D1HeroPlanner artifact
      uses: actions/download-artifact@v4
      with:
        name: D1HeroPlanner-Linux-x64.zip
    - run: mv ${{github.workspace}}/D1HeroPlanner.zip ${{github.workspace}}/D1HeroPlanner-Linux-x64.zip

    - name: Create release notes
      run: |
        echo 'Latest nightly builds'         > RELEASE_NOTE.md
        echo ''                             >> RELEASE_NOTE.md
        echo '### **D1HeroPlanner**'       >> RELEASE_NOTE.md
        echo '_Filename_ | _Description_'   >> RELEASE_NOTE.md
        echo '------------ | -------------' >> RELEASE_NOTE.md
        echo '[D1HeroPlanner-Windows-x64.zip](../../releases/download/dgt-nightly/D1HeroPlanner-Windows-x64.zip)   | D1HeroPlanner for `Windows x64`' >> RELEASE_NOTE.md
        echo '[D1HeroPlanner-Windows-x86.zip](../../releases/download/dgt-nightly/D1HeroPlanner-Windows-x86.zip)   | D1HeroPlanner for `Windows x86`' >> RELEASE_NOTE.md
        echo '[D1HeroPlanner-Linux-x64.zip](../../releases/download/dgt-nightly/D1HeroPlanner-Linux-x64.zip)   | D1HeroPlanner for `Linux x64`' >> RELEASE_NOTE.md

    #- name: Show content of workspace
    #  run: find $RUNNER_WORKSPACE
    #  shell: bash

    #- uses: dev-drprasad/delete-tag-and-release@v0.2.0
    - uses: pionere/delete-tag-and-release@v1
      with:
        delete_release: true
        tag_name: dgt-nightly
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Sleep a bit to let GitHub recover from the shock of tag-delete
    #  run: Start-Sleep -s 60
    #  shell: powershell
    - name: Sleep for 60 seconds
      run: sleep 60s
      shell: bash

    - name: Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        tag_name: dgt-nightly
        body_path: ${{ github.workspace }}/RELEASE_NOTE.md
        draft: false
        prerelease: true
        files: |
          ${{github.workspace}}/D1HeroPlanner-Windows-x64.zip
          ${{github.workspace}}/D1HeroPlanner-Windows-x86.zip
          ${{github.workspace}}/D1HeroPlanner-Linux-x64.zip
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
